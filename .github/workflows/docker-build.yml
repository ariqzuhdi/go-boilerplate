name: Build and Deploy to ECR and EC2

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
      - 'src/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set image tag
        id: set_image_tag
        run: echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT


      - name: Build and Tag Docker image
        run: |
            IMAGE_URI=${{ secrets.AWS_ECR_REPOSITORY_URI }}
            docker buildx build --platform linux/arm64 -t journaling-app:latest --load .
            docker tag journaling-app:latest $IMAGE_URI:latest
            docker tag journaling-app:latest $IMAGE_URI:${{ steps.set_image_tag.outputs.image_tag }}

      - name: Push Docker image to ECR
        run: |
          IMAGE_URI=${{ secrets.AWS_ECR_REPOSITORY_URI }}
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:${{ steps.set_image_tag.outputs.image_tag }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: SSH into EC2 instance and deploy container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Cleaning up Docker to free space..."
            docker system prune -af
            docker volume prune -f
            docker builder prune -af

            echo "Logging in to ECR..."
            IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
            REPO_URI="${{ secrets.AWS_ECR_REPOSITORY_URI }}"
            echo "IMAGE_TAG is: $IMAGE_TAG"
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $REPO_URI

            echo "Pulling image $REPO_URI:$IMAGE_TAG ..."
            docker pull $REPO_URI:${IMAGE_TAG}

            echo "Stopping and removing existing container if it exists"
            docker stop journaling-app || true
            docker rm journaling-app || true

            echo "Running new container with image tag: ${IMAGE_TAG}"
            docker run -d \
              --name journaling-app \
              --restart unless-stopped \
              -p 3000:3000 \
              -e PORT='${{ secrets.PORT }}' \
              -e DB_URL='${{ secrets.DB_URL }}' \
              -e MONKEYTYPE_API_KEY='${{ secrets.MONKEYTYPE_API_KEY }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e EMAIL_FROM='${{ secrets.EMAIL_FROM }}' \
              -e EMAIL_PASSWORD='${{ secrets.EMAIL_PASSWORD }}' \
              -e SMTP_HOST='${{ secrets.SMTP_HOST }}' \
              -e SMTP_PORT='${{ secrets.SMTP_PORT }}' \
              $REPO_URI:${IMAGE_TAG}
